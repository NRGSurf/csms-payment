// theme/nrg-theme.ts
import { createTheme } from "@mui/material/styles";
import tokens from "./nrg-tokens"; // generated by the tokens script

// tiny helper to read nested values safely
const gv = (p: string, fallback?: string) =>
  p.split(".").reduce<any>((o, k) => (o ? (o as any)[k] : undefined), tokens) ??
  fallback ??
  undefined;

const lightBgPrimary = gv("light.colors.background.primary.value") as string;
const lightBgSecondary = gv(
  "light.colors.background.secondary.value"
) as string;
const lightTextPrimary = gv("light.colors.text.primary.value") as string;
const lightTextSecondary = gv("light.colors.text.secondary.value") as string;

const brandPrimary = gv("global.colors.brand.primary.value") as string;
const brandSecondary = gv("global.colors.brand.secondary.value") as string;
const success = gv("global.colors.semantic.success.value") as string;
const warning = gv("global.colors.semantic.warning.value") as string;
const error = gv("global.colors.semantic.error.value") as string;

const fontBase = parseInt(
  (gv("global.typography.fontSize.base.value") as string) || "14",
  10
);
const font2xl = parseInt(
  (gv("global.typography.fontSize.2xl.value") as string) || "24",
  10
);

const radius = parseInt(
  (gv("global.borderRadius.xl.value") as string) || "16",
  10
);

const theme = createTheme({
  palette: {
    mode: "light",
    primary: { main: brandPrimary },
    secondary: { main: brandSecondary },
    success: { main: success },
    warning: { main: warning },
    error: { main: error },
    text: {
      primary: lightTextPrimary,
      secondary: lightTextSecondary,
    },
    background: {
      default: lightBgSecondary,
      paper: lightBgPrimary,
    },
  },
  shape: { borderRadius: radius },
  typography: {
    fontSize: fontBase,
    h4: { fontSize: font2xl },
  },
  components: {
    MuiCard: { styleOverrides: { root: { borderRadius: radius } } },
    MuiButton: {
      styleOverrides: {
        root: { borderRadius: radius, textTransform: "none", fontWeight: 600 },
      },
    },
  },
});

export default theme;
