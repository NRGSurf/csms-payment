import fs from "fs";
import path from "path";

const src = path.resolve("design/tokens/tokens.json");
const out = path.resolve("styles/tokens.css");

const raw = JSON.parse(fs.readFileSync(src, "utf-8"));

/** Safely resolve {ref.paths} like "{global.colors.brand.primary}" */
const resolveRef = (val, tree) => {
  const m = typeof val === "string" && val.match(/^\{(.+)\}$/);
  if (!m) return val;
  const keys = m[1].split(".");
  let cur = tree;
  for (const k of keys) cur = cur?.[k];
  return cur?.value ?? val;
};

const walk = (node, prefix = []) => {
  const entries = [];
  for (const [k, v] of Object.entries(node)) {
    if (v && typeof v === "object" && "value" in v) {
      let val = resolveRef(v.value, raw);
      entries.push([`--${[...prefix, k].join("-")}`, String(val)]);
    } else if (v && typeof v === "object") {
      entries.push(...walk(v, [...prefix, k]));
    }
  }
  return entries;
};

const vars = walk(raw);

const css = `/* autogenerated from design/tokens/tokens.json */
:root{
${vars.map(([name, val]) => `  ${name}: ${val};`).join("\n")}
}
`;

fs.writeFileSync(out, css);
console.log(`Wrote ${out} with ${vars.length} variables.`);
